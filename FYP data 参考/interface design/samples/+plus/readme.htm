<html>
  <head>
    <style></style>
    <meta name="generator" content="h-smile:richtext"/>
  </head>
<body>
  <h1>The Plus Framework</h1>
  <p>Main goal of the Plus is to provide declarative data binding facilities - data (model) can be bound with its HTML representation in various ways.</p>
  <h2>Model declaration, the <em>model</em> attribute</h2>
  <p>Any DOM element-container can be linked with some namespace (object) that contains data (a.k.a. model) to be viewed inside the container. Such a link is established by special model attribute:</p>
  <pre>&lt;body model=&quot;MyDataNamespace&quot;&gt;
   ...
&lt;/body&gt;
</pre>
  <p>And if you have in your script this:</p>
  <pre>namespace MyDataNamespace {
   ...
}
</pre>
  <p>then content of the body element (in this case) can be linked (bound) with the data in MyDataNamespace.</p>
  <h2>Bound elements</h2>
  <p>Element's value can be bound with some variable in the model. +plus framework uses attribute <em>name</em> that shall contain name or expression to bind with.</p>
  <pre>&lt;body model=&quot;Data&quot;&gt; 
  &lt;p&gt;Whom to greet: &lt;input|text(greeting) /&gt;&lt;/p&gt;
  &lt;p&gt;Greeting: Hello &lt;output(greeting) /&gt;!&lt;/p&gt;
&lt;/body&gt;
</pre>
  <p>Two elements above are bound with the same variable <code>Data.greeting</code> in the model. Changes in the &lt;input&gt; element are reflected in the &lt;output&gt; element.</p>
  <h2>Bound attributes </h2>
  <p>Sciter also suppports attribute value binding with variables and object properties. To define bound attribute simply add '@' character in front of its name and provide variable name or expression as a value of the attribute: </p>
  <pre>&lt;li&gt;&lt;picture @src=&quot;customer.image&quot; /&gt; &lt;output(customer.name)/&gt;&lt;/li&gt;
</pre>
  <p>Here <code>src</code> attribute will be bound with <code>customer.image</code> variable and the ouput will contain value of <code>customer.name</code> variable.</p>
  <h2>Repeatables</h2>
  <p>Any container may have attribute each=&quot;<em>item</em> in <em>items</em>&quot; defined. In this case initial content of the container is used as a template markup that will be repeated for each element in items collection. Format of the <em>each</em> attribute:</p>
  <pre>{item} <strong>in</strong> {items-expression} [ <strong>|</strong> {filter-expression}
</pre>
  <p>where:</p>
  <ul>
    <li><code>{item}</code> - arbitrary name of variable that represents current item in repeatable section;</li>
    <li><code>{items-expression}</code> - name of variable in model or expression that resolves to some array - list of objects to render by this repeatable.</li>
    <li><code>{filter-expression}</code> - optional, filter to apply to list of objects. Can be either:</li>
    <ul>
      <li><code>null</code> (or simply ommited) - no filter is set, all elements are rendered;</li>
      <li><code>object</code> (including object literal) - all elements matching that object are included into output;</li>
      <li><code>function(item, index)</code> - function to be called for each item, if it returns <em>true</em> - record gets rendered;</li>
      <li><code>&quot;string&quot;</code> - if any string property in the item contains the string - the item gets rendered.</li></ul></ul>
  <p>Example of the list rendering myCustomers items as list items:</p>
  <pre>  &lt;ol each=&quot;customer in myCustomers&quot;&gt;
      &lt;li&gt;&lt;picture @src=&quot;customer.image&quot; /&gt; &lt;output(customer.name)/&gt;&lt;/li&gt;
  &lt;/ol&gt;
</pre>
  <h2>Basic event handlers</h2>
  <p>Elements may contain one of event attributes defining function to be executed on corresponding action. The handler function is called with <code>this</code> set to the DOM element and first parameter set to bound object. </p>
  <p>List of event attributes: &quot;click&quot;, &quot;dblclick&quot;, &quot;change&quot;, &quot;enter&quot;, &quot;escape&quot;, &quot;focusin&quot;, &quot;focusout&quot;.</p>
  <p>Example:</p>
  <pre>  &lt;b click=&quot;items.removeByValue(item)&quot;&gt;x&lt;/b&gt;
</pre>
  <p>Click on such <code>&lt;b&gt;</code> element will call <code>items.removeByValue()</code> function passing it current item object.</p>
</body>
</html>